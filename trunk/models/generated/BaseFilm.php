<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Film', 'doctrine');

/**
 * BaseFilm
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $film_id
 * @property string $film_titre
 * @property date $film_date
 * @property string $film_resume
 * @property string $film_image_id
 * @property integer $film_realisateur_id
 * @property integer $film_site_id
 * @property integer $film_site_note
 * @property Realisateur $Realisateur
 * @property Site $Site
 * @property Doctrine_Collection $FilmFavoris
 * @property Doctrine_Collection $Listeacteur
 * @property Doctrine_Collection $Listecategoriesfilm
 * @property Doctrine_Collection $Listerecompenses
 * @property Doctrine_Collection $Note
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseFilm extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('film');
        $this->hasColumn('film_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('film_titre', 'string', 120, array(
             'type' => 'string',
             'length' => 120,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('film_date', 'date', null, array(
             'type' => 'date',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('film_resume', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('film_image_id', 'string', 40, array(
             'type' => 'string',
             'length' => 40,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('film_realisateur_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('film_site_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('film_site_note', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Realisateur', array(
             'local' => 'film_realisateur_id',
             'foreign' => 'realisateur_id'));

        $this->hasOne('Site', array(
             'local' => 'film_site_id',
             'foreign' => 'site_id'));

        $this->hasMany('FilmFavoris', array(
             'local' => 'film_id',
             'foreign' => 'film_id'));

        $this->hasMany('Listeacteur', array(
             'local' => 'film_id',
             'foreign' => 'listeActeur_film_id'));

        $this->hasMany('Listecategoriesfilm', array(
             'local' => 'film_id',
             'foreign' => 'listeCategoriesFilms_film_id'));

        $this->hasMany('Listerecompenses', array(
             'local' => 'film_id',
             'foreign' => 'listeRecompense_film_id'));

        $this->hasMany('Note', array(
             'local' => 'film_id',
             'foreign' => 'film_id'));
    }
}